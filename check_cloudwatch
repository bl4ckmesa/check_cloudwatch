#!/bin/bash
# Based off https://github.com/seancdugan/check_cloudwatch/blob/master/check_cloudwatch
#
# Requires:
#   - aws
#   - jq
#

# $1 - Optional Metric Name (Defaults to global METRIC_NAME)
aws_cloudwatch() {
	sudo aws \
		--output text \
		--region $REGION \
		cloudwatch get-metric-statistics \
		--namespace $NAMESPACE \
		--metric-name ${1:-$METRIC_NAME} \
		--start-time $START_TIME \
		--end-time $END_TIME \
		--period $PERIOD \
		--statistics $STATISTICS \
		--dimensions $DIMENSIONS
}

aws_elasticache() {
	sudo aws \
		--region $REGION \
		--output json \
		--cache-cluster-id $INSTANCE \
		elasticache describe-cache-clusters
}

aws_rds() {
	sudo aws \
		--region $REGION \
		--output json \
		rds describe-db-instances \
		--db-instance-identifier $INSTANCE
}

namespace() {
	case $NAMESPACE in
		AWS/RDS)
			if [[ $METRIC_NAME == "CombinedIOPS" ]]; then
				RESULT=$(aws_cloudwatch ReadIOPS)
				UNIT=$(echo $RESULT | awk '{print $5}')
			else
				RESULT=$(aws_cloudwatch)
				UNIT=$(echo $RESULT | awk '{print $5}')
			fi
			DESCRIPTION=$(aws_rds)
			;;
		AWS/ElastiCache)
			UNIT=$(echo $(aws_cloudwatch) | awk '{print $5}')
			DESCRIPTION=$(aws_elasticache)
			;;
		AWS/EC2)
			RESULT=$(aws_cloudwatch)
			UNIT=$(echo $RESULT | awk '{print $5}')
			;;
		*)
			echo "Unsupported AWS Namespace"
			;;
	esac
}

metrics() {
	case $METRIC_NAME in
		FreeableMemory|FreeStorageSpace|BytesUsedForCache)
			TMP=$(echo $WARNING | cut -d'.' -f1)
			WARNING=$TMP
			TMP=$(echo $CRITICAL | cut -d'.' -f1)
			CRITICAL=$TMP
			TMP_METRIC=$(echo $RESULT | awk '{print $3}' | cut -d'.' -f1)
			METRIC=$(( $TMP_METRIC / 1000000 ))
			if [[ 1 -eq "$(echo "${METRIC} < ${CRITICAL}" | bc)" ]]; then
				EXIT=2
			elif [[ 1 -eq "$(echo "${METRIC} < ${WARNING}" | bc)" ]]; then
				EXIT=1
			elif [[ 1 -eq "$(echo "${METRIC} > ${WARNING}" | bc)" ]]; then
				EXIT=0
			else
				EXIT=3
			fi
			;;
			ReadIOPS|WriteIOPS|CombinedIOPS)
			if [[ $METRIC_NAME == "CombinedIOPS" ]]; then
				WriteIOPS=$(aws_cloudwatch WriteIOPS | awk '{print $2}')
				WriteIOPS=$(printf "%0.2f" $WriteIOPS)
				ReadIOPS=$(aws_cloudwatch ReadIOPS | awk '{print $2}')
				ReadIOPS=$(printf "%0.2f" $ReadIOPS)
				TOTAL_IOPS=$(aws_rds | jq .DBInstances[].Iops)
 				[ "$TOTAL_IOPS" == null ] && TOTAL_IOPS=0
				IOPS=$(printf "%0.2f" $TOTAL_IOPS)
				METRIC=$(echo "${WriteIOPS} + ${ReadIOPS}" | bc)
				METRIC=$(printf "%0.2f" $METRIC)
			else
				if [[ $METRIC_NAME == "ReadIOPS" ]]; then
					TMP_IOPS=$(aws_cloudwatch WriteIOPS | tail -n1 | awk '{print $2}')
				fi
				if [[ $METRIC_NAME == "WriteIOPS" ]]; then
					TMP_IOPS=$(aws_cloudwatch ReadIOPS | tail -n1 | awk '{print $2}')
				fi
				TOTAL_IOPS=$(aws_rds | jq .DBInstances[].Iops)
 				[ "$TOTAL_IOPS" == null ] && TOTAL_IOPS=0
				IOPS=$(printf "%0.2f" $TMP_IOPS)
				TMP_METRIC=$(echo $RESULT | awk '{print $3}')
				# TMP_METRIC is not rounded to 2 decimal points but METRIC is.
				METRIC=$(printf "%0.2f" $TMP_METRIC)
				USED_IOPS=$(echo "${METRIC} + ${IOPS}" | bc)
			fi
			if [[ 1 -eq "$(echo "${METRIC} > ${CRITICAL}" | bc)" ]]; then
				EXIT=2
			elif [[ 1 -eq "$(echo "${METRIC} > ${WARNING}" | bc)" ]]; then
				EXIT=1
			elif [[ 1 -eq "$(echo "${METRIC} < ${WARNING}" | bc)" ]]; then
				EXIT=0
			else
				EXIT=3
			fi
			;;
		*)
			TMP_METRIC=$(echo $RESULT | awk '{print $3}')
			# TMP_METRIC is not rounded to 2 decimal points but METRIC is.
			METRIC=$(printf "%0.2f" $TMP_METRIC)
			if [[ 1 -eq "$(echo "${METRIC} > ${CRITICAL}" | bc)" ]]; then
				EXIT=2
			elif [[ 1 -eq "$(echo "${METRIC} > ${WARNING}" | bc)" ]]; then
				EXIT=1
			elif [[ 1 -eq "$(echo "${METRIC} < ${WARNING}" | bc)" ]]; then
				EXIT=0
			else
				EXIT=3
			fi
			;;
	esac
}

get_units(){
	case $UNIT in
		Bytes) UNIT=' MB' ;;
		Bytes/Second) UNIT=' bytes/second' ;;
		Count)
			UNIT=' Count'
			TMP_METRIC=$(echo $METRIC | cut -d'.' -f1)
			METRIC=$TMP_METRIC
			;;
		Count/Second)
			if [[ $METRIC_NAME =~ "Combined" ]]; then
				UNIT="/$TOTAL_IOPS - ReadIOPS: $ReadIOPS/$TOTAL_IOPS - WriteIOPS: $WriteIOPS/$TOTAL_IOPS"
			else
				UNIT="/$TOTAL_IOPS - CombinedIOPS: $USED_IOPS/$TOTAL_IOPS"
			fi
			;;
		Percent) UNIT='%' ;;
		Seconds) UNIT=' seconds' ;;
	esac
}

exit_code() {
	case $EXIT in
		0) echo "OK - $METRIC_NAME (${MINUTES} min $STATISTICS): $METRIC$UNIT"; exit $EXIT ;;
		1) echo "WARNING - $METRIC_NAME (${MINUTES} min $STATISTICS): $METRIC$UNIT"; exit $EXIT ;;
		2) echo "CRITICAL - $METRIC_NAME (${MINUTES} min $STATISTICS): $METRIC$UNIT"; exit $EXIT ;;
		*) echo "UNKNOWN - $METRIC_NAME (${MINUTES} min $STATISTICS): $METRIC$UNIT"; exit 3 ;;
	esac
}

main() {
	[[ ! $REGION ]] && REGION="us-west-2"
	
	while getopts "p:n:i:m:t:s:w:c:" opt; do
		case "$opt" in 
			p) PROFILE=$OPTARG ;;
			n) NAMESPACE="AWS/$OPTARG" ;;
			m) METRIC_NAME=$OPTARG ;;
			t)
				MINUTES=$OPTARG
				START_TIME=$(date -u +'%Y-%m-%dT%H:%M:%S' -d "-$OPTARG minutes")
				END_TIME=$(date -u +'%Y-%m-%dT%H:%M:00')
				PERIOD="$((60 * $OPTARG))"
				;;
			s) STATISTICS=$OPTARG ;;
			i)
				INSTANCE=$OPTARG
				if [[ $NAMESPACE =~ "RDS" ]]; then
					DIMENSIONS="Name=DBInstanceIdentifier,Value=$OPTARG"
				fi
				if [[ $NAMESPACE =~ "ElastiCache" ]]; then
					DIMENSIONS="Name=CacheClusterId,Value=$OPTARG"
				fi
				if [[ $NAMESPACE =~ "EC2" ]]; then
					DIMENSIONS="Name=InstanceId,Value=$OPTARG"
				fi
				;;
			w) WARNING=$OPTARG.00 ;;
			c) CRITICAL=$OPTARG.00 ;;
		esac
	done
	namespace
	metrics
	get_units
	exit_code
}

main "$@"
